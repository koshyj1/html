@model PDFTemplateViewModel
@{
    TimeSpan groupByTime = TimeSpan.FromSeconds(300);
}
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>@Model.Patient.Name</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <style type="text/css">
    @@page {
        size: letter;
    }
    .page {
        position: relative;
        page-break-after: always;
        page-break-before: always;
        width: 10.5in;
        height: 12.65in;
    }

    .container {
        padding: 0.25in;
        padding-top: 0;
    }
  </style>
</head>

<body>
    <div class="page">
        <div class="container">
            <img src="/api/settings/vet-settings/logo" style="max-width: 400px; max-height: 130px;" class="float-left mr-2" />
            @if (!String.IsNullOrEmpty(Model.VetSettings.Name))
            {
                <div>@Model.VetSettings.Name</div>
            }
            @if (!String.IsNullOrEmpty(Model.VetSettings.Address))
            {
                <div>@Model.VetSettings.Address</div>
            }
            <div>
                @if (!String.IsNullOrEmpty(Model.VetSettings.City))
                {
                    @Model.VetSettings.City
                }
                @if (!String.IsNullOrEmpty(Model.VetSettings.State))
                {
                    @Model.VetSettings.State
                }
                @if (!String.IsNullOrEmpty(Model.VetSettings.ZipCode))
                {
                    @Model.VetSettings.ZipCode
                }
            </div>
            @if (!String.IsNullOrEmpty(Model.VetSettings.PhoneNumber))
            {
                <div>@Model.VetSettings.PhoneNumber</div>
            }
            @if (!String.IsNullOrEmpty(Model.VetSettings.Email))
            {
                <div>@Model.VetSettings.Email</div>
            }
            <div class="clearfix"></div>
            <hr />
            <div class="row">
                <div class="col-6">
                    <dl class="row mb-0">
                        <dt class="col-4">Version</dt>
                        <dd class="col-8">@Model.Version</dd>

                        <dt class="col-4">Date</dt>
                        <dd class="col-8">@Model.Run.Timestamp.ToLocalTimeExt().ToShortDateString() (@(TimeZoneInfo.Local.StandardName))</dd>

                        <dt class="col-4">Duration</dt>
                        <dd class="col-8">@(Model.CalculateDuration().TotalMinutes.ToString("F")) mins</dd>

                        <dt class="col-4">Average RR</dt>
                        <dd class="col-8">@(Model.CalculateAverageRR().ToString("F"))</dd>

                        <dt class="col-4">RR Limits</dt>
                        <dd class="col-8">
                            @if (Model.Run.RespirationRateLowAlarm.HasValue || Model.Run.RespirationRateLowWarning.HasValue || Model.Run.RespirationRateHighAlarm.HasValue || Model.Run.RespirationRateHighWarning.HasValue)
                            {
                                <span class="text-danger">@Model.Run.RespirationRateLowAlarm</span>
                                <span class="text-warning">@Model.Run.RespirationRateLowWarning</span>
                                <span class="text-muted">/</span>
                                <span class="text-warning">@Model.Run.RespirationRateHighWarning</span>
                                <span class="text-danger">@Model.Run.RespirationRateHighAlarm</span>
                            }
                            else
                            {
                                <span class="text-danger">@Model.Patient.RespirationRateLowAlarm</span>
                                <span class="text-warning">@Model.Patient.RespirationRateLowWarning</span>
                                <span class="text-muted">/</span>
                                <span class="text-warning">@Model.Patient.RespirationRateHighWarning</span>
                                <span class="text-danger">@Model.Patient.RespirationRateHighAlarm</span>
                            }
                        </dd>

                        <dt class="col-4">Average HR</dt>
                        <dd class="col-8">@(Model.CalculateAverageHR().ToString("F"))</dd>

                        <dt class="col-4">HR Limits</dt>
                        <dd class="col-8">
                            @if (Model.Run.HeartRateLowAlarm.HasValue || Model.Run.HeartRateLowWarning.HasValue || Model.Run.HeartRateHighAlarm.HasValue || Model.Run.HeartRateHighWarning.HasValue)
                            {
                                <span class="text-danger">@Model.Run.HeartRateLowAlarm</span>
                                <span class="text-warning">@Model.Run.HeartRateLowWarning</span>
                                <span class="text-muted">/</span>
                                <span class="text-warning">@Model.Run.HeartRateHighWarning</span>
                                <span class="text-danger">@Model.Run.HeartRateHighAlarm</span>
                            }
                            else
                            {
                                <span class="text-danger">@Model.Patient.HeartRateLowAlarm</span>
                                <span class="text-warning">@Model.Patient.HeartRateLowWarning</span>
                                <span class="text-muted">/</span>
                                <span class="text-warning">@Model.Patient.HeartRateHighWarning</span>
                                <span class="text-danger">@Model.Patient.HeartRateHighAlarm</span>
                            }
                        </dd>

                        @if (Model.AttendingDoctor != null)
                        {
                            <dt class="col-4">Attending Dr.</dt>
                            <dd class="col-8">@Model.AttendingDoctor.GetDisplayName()</dd>
                        }

                    </dl>
                </div>
                <div class="col-6">
                    <dl class="row mb-0">
                        <dt class="col-4">Patient</dt>
                        <dd class="col-8">@Model.Patient.Name @(!String.IsNullOrEmpty(Model.Patient.PatientId) ? $"({Model.Patient.PatientId})" : "")</dd>

                        <dt class="col-4">Owner</dt>
                        <dd class="col-8">@Model.Patient.OwnerName</dd>

                        <dt class="col-4">Gender</dt>
                        <dd class="col-8">@Model.Patient.Sex.GetDisplayName()</dd>

                        <dt class="col-4">Species</dt>
                        <dd class="col-8">@Model.Patient.Species.GetDisplayName()</dd>

                        <dt class="col-4">Breed</dt>
                        <dd class="col-8">@Model.Patient.Breed</dd>

                        <dt class="col-4">Birth Date</dt>
                        <dd class="col-8">@Model.Patient.BirthDate.ToShortDateString()</dd>

                        <dt class="col-4">Weight</dt>
                        <dd class="col-8">@Model.Run.Weight @Model.Patient.WeightUnit.GetDisplayDescription()</dd>

                        @if (Model.VetTech != null)
                        {
                            <dt class="col-4">Vet Tech</dt>
                            <dd class="col-8">@Model.VetTech.GetDisplayName()</dd>
                        }
                    </dl>
                </div>
            </div>
            <hr />
            <h3>Vital Data</h3>
            <table class="table table-striped table-sm  ">
                <thead>
                <th>Timestamp</th>
                <th>Elapsed Time</th>
                <th width="110">Avg HR</th>
                <th width="110">Avg RR</th>
                <th width="120">Min/Max HR</th>
                <th width="120">Min/Max RR</th>
                </thead>
                <tbody>
                    @{
                        double previousAverageHR = -1;
                        double previousAverageRR = -1;

                        var groups = Model.Data.GroupBy(t => t.Timestamp.ToLocalTimeExt().RoundDown(groupByTime));

                        var firstGroup = groups.FirstOrDefault();
                        var lastGroup = groups.LastOrDefault();
                    }

                    @foreach (var data in groups)
                    {
                        if (previousAverageHR == -1)
                        {
                            previousAverageHR = data.Average(t => t.HeartRate);
                        }
                        if (previousAverageRR == -1)
                        {
                            previousAverageRR = data.Average(t => t.RespirationRate);
                        }
                        double averageHRChange = data.Average(t => t.HeartRate) - previousAverageHR;
                        double averageRRChange = data.Average(t => t.RespirationRate) - previousAverageRR;

                        <tr>
                            <td>@((firstGroup.Key == data.Key) ? firstGroup.FirstOrDefault().Timestamp.ToLocalTimeExt() : (lastGroup.Key == data.Key) ? lastGroup.LastOrDefault().Timestamp.ToLocalTimeExt() : data.Key)</td>
                            <td>@((data.Max(t => t.Timestamp) - Model.Run.Timestamp).ToString(@"hh\:mm\:ss"))</td>
                            <td>
                                @(data.Average(t => t.HeartRate).ToString("F"))
                                <small>@String.Format("({0}{1:F})", averageHRChange < 0 ? "" : "+", averageHRChange)</small>
                            </td>
                            <td>
                                @(data.Average(t => t.RespirationRate).ToString("F"))
                                <small>@String.Format("({0}{1:F})", averageRRChange < 0 ? "" : "+", averageRRChange)</small>
                            </td>
                            <td>@data.Min(t => t.HeartRate) / @data.Max(t => t.HeartRate)</td>
                            <td>@data.Min(t => t.RespirationRate) / @data.Max(t => t.RespirationRate)</td>
                        </tr>

                        previousAverageHR = data.Average(t => t.HeartRate);
                        previousAverageRR = data.Average(t => t.RespirationRate);
                    }
                </tbody>
            </table>
            <hr />
            <h3>Patient Notes</h3>
            @foreach (var row in Model.Log)
            {

                <dl class="row">
                    <dt class="col-4">@row.Timestamp.ToLocalTimeExt()</dt>
                    <dd class="col-8">
                        <div>@row.Message</div>
                    </dd>
                </dl>
            }
            <hr />

            @if(Model.Images.Any())
            {
                <h3 style="page-break-before: always !important;">Patient Image</h3>
                foreach (var image in Model.Images)
                {
                    var base64 = Convert.ToBase64String(image.Image);
                    var imgSrc = String.Format("data:image/jpg;base64,{0}", base64);
                    <img src="@imgSrc"  class="img-fluid" />
                }
            }
        </div>
    </div>
</body>
</html>